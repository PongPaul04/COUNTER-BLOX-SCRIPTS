-- Load the Orion Library
local OrionLib = loadstring(game:HttpGet('https://raw.githubusercontent.com/shlexware/Orion/main/source'))()

-- Create the main window
local Window = OrionLib:MakeWindow({
    Name = "DOSHUB",
    HidePremium = false,
    SaveConfig = true,
    ConfigFolder = "OrionTest"
})

-- Create tabs
local EspTab = Window:MakeTab({ Name = "ESP", Icon = "rbxassetid://4483345998", PremiumOnly = false })
local AimbotTab = Window:MakeTab({ Name = "AIMBOT", Icon = "rbxassetid://4483345998", PremiumOnly = false })
local SettingsTab = Window:MakeTab({ Name = "Settings", Icon = "rbxassetid://4483345998", PremiumOnly = false })

-- Global Variables
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer
local HighlightEnabled = false
local HPBarEnabled = false
local Mouse = LocalPlayer:GetMouse()
local RaycastParams = RaycastParams.new()
local scriptRunning = true
local MAX_SEARCH_DISTANCE = 1000

RaycastParams.FilterType = Enum.RaycastFilterType.Blacklist
RaycastParams.IgnoreWater = true

-- Aimbot and ESP Variables
local AimbotEnabled = false
local WallCheckEnabled = false
local FOV = 150
local Smoothness = 2
local FOVCircleColor = Color3.fromRGB(25, 70, 200)
local LockedPlayer = nil
local AimbotActive = false
local TeamCheckEnabled = false  -- Initially disabled
local c = workspace.CurrentCamera
local ps = game:GetService("Players")
local lp = ps.LocalPlayer
local rs = game:GetService("RunService")


-- FOV Circle
local fovCircle = Drawing.new("Circle")
fovCircle.Thickness = 3
fovCircle.NumSides = 60
fovCircle.Transparency = 0.5
fovCircle.Color = FOVCircleColor
fovCircle.Radius = FOV / 2
fovCircle.Visible = true

-- Function to create HP bar for a character
local function createHPBar(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end

    -- Check if the HP bar already exists
    if character:FindFirstChild("HPBar") then return end

    local billboardGui = Instance.new("BillboardGui")
    billboardGui.Name = "HPBar"
    billboardGui.Size = UDim2.new(0.2, 0, 4, 0)
    billboardGui.StudsOffset = Vector3.new(2, 0, 0)
    billboardGui.AlwaysOnTop = true
    billboardGui.Parent = character

    local bgFrame = Instance.new("Frame")
    bgFrame.Size = UDim2.new(1, 0, 1, 0)
    bgFrame.Position = UDim2.new(0, 0, 0, 0)
    bgFrame.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
    bgFrame.Parent = billboardGui

    local hpBar = Instance.new("Frame")
    hpBar.Size = UDim2.new(1, 0, 1, 0)
    hpBar.Position = UDim2.new(0, 0, 0, 0)
    hpBar.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
    hpBar.Parent = bgFrame

    humanoid:GetPropertyChangedSignal("Health"):Connect(function()
        local healthPercentage = humanoid.Health / humanoid.MaxHealth
        hpBar.Size = UDim2.new(1, 0, healthPercentage, 0)
        hpBar.Position = UDim2.new(0, 0, 1 - healthPercentage, 0)
    end)
end

-- Function to highlight a player
local function highlightPlayer(player)
    if player == LocalPlayer then return end

    local character = player.Character or player.CharacterAdded:Wait()

    if character then
        -- Remove existing highlight
        local existingHighlight = character:FindFirstChildOfClass("Highlight")
        if existingHighlight then
            existingHighlight:Destroy()
        end

        local highlight = Instance.new("Highlight")
        highlight.Adornee = character
        highlight.FillTransparency = 1

        if player.Team == LocalPlayer.Team then
            highlight.OutlineColor = Color3.fromRGB(0, 255, 0)  -- Green for teammates
        else
            highlight.OutlineColor = Color3.fromRGB(255, 0, 0)  -- Red for enemies
        end

        highlight.Parent = character
    end
end
-- Character added and removed handling
local function onCharacterAdded(character)
    if HighlightEnabled then highlightPlayer(LocalPlayer) end
    if HPBarEnabled then createHPBar(character) end
end

local function onCharacterRemoving(character)
    local highlight = character:FindFirstChildOfClass("Highlight")
    if highlight then highlight:Destroy() end
    
    local hpBar = character:FindFirstChild("HPBar")
    if hpBar then hpBar:Destroy() end
end

LocalPlayer.CharacterAdded:Connect(onCharacterAdded)
LocalPlayer.CharacterRemoving:Connect(onCharacterRemoving)

-- Function to aim at the closest player in FOV
local function getClosestPlayerInFOV()
    local closestPlayer = nil
    local closestDistance = math.huge

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") then
            local headPosition = player.Character.Head.Position
            local viewportPoint = Camera:WorldToViewportPoint(headPosition)
            local mouseLocation = UserInputService:GetMouseLocation()
            local distanceFromMouse = (Vector2.new(viewportPoint.X, viewportPoint.Y) - Vector2.new(mouseLocation.X, mouseLocation.Y)).Magnitude
            if distanceFromMouse < FOV / 2 and viewportPoint.Z > 0 then
                local distance = (Camera.CFrame.Position - headPosition).Magnitude
                if distance < closestDistance then
                    closestDistance = distance
                    closestPlayer = player
                end
            end
        end
    end
    return closestPlayer
end

-- Function to perform raycast check to ensure there is no wall between local player and target
local function isVisible(player)
    if not player or not player.Character or not player.Character:FindFirstChild("Head") then
        return false
    end

    local headPosition = player.Character.Head.Position
    local origin = Camera.CFrame.Position  -- Local player's camera position
    
    -- Set up raycast parameters to ignore the local player and other irrelevant objects
    RaycastParams.FilterDescendantsInstances = {LocalPlayer.Character}  -- Ignore local player's own character

    -- Perform raycast from the local player (camera) to the target player's head
    local rayResult = workspace:Raycast(origin, headPosition - origin, RaycastParams)
    
    -- If there's no hit or if the hit part belongs to the target player, they are visible
    if not rayResult or rayResult.Instance:IsDescendantOf(player.Character) then
        return true
    else
        return false  -- Something (like a wall) is blocking the view
    end
end

-- Optimized function to get the closest player within FOV while checking for walls
local function getClosestPlayerInFOV()
    local closestPlayer = nil
    local closestDistance = math.huge

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") then
            
            -- Skip teammates if TeamCheck is enabled
            if TeamCheckEnabled and player.Team == LocalPlayer.Team then
                continue  -- Skip teammates
            end
            
            local headPosition = player.Character.Head.Position
            local viewportPoint = Camera:WorldToViewportPoint(headPosition)
            local mouseLocation = UserInputService:GetMouseLocation()
            local distanceFromMouse = (Vector2.new(viewportPoint.X, viewportPoint.Y) - Vector2.new(mouseLocation.X, mouseLocation.Y)).Magnitude

            -- Check if player is within FOV and in front of the camera (viewportPoint.Z > 0)
            if distanceFromMouse < FOV / 2 and viewportPoint.Z > 0 then
                local distance = (Camera.CFrame.Position - headPosition).Magnitude

                -- Perform wall check using raycasting if WallCheckEnabled is true
                if WallCheckEnabled and not isVisible(player) then
                    continue  -- Skip if there is an obstacle between the player and target
                end

                -- Select the closest player within FOV
                if distance < closestDistance then
                    closestDistance = distance
                    closestPlayer = player
                end
            end
        end
    end

    return closestPlayer
end


-- Aimbot functionality
local function aimAtPlayer(player)
    if player and player.Character and player.Character:FindFirstChild("Head") then
        local headPosition = player.Character.Head.Position
        local cameraPosition = Camera.CFrame.Position
        local direction = (headPosition - cameraPosition).unit
        local newCFrame = CFrame.new(cameraPosition, cameraPosition + direction)
        Camera.CFrame = Camera.CFrame:Lerp(newCFrame, Smoothness / 10)
    end
end

-- Function to check for key press and handle aimbot activation
local shiftKey = Enum.KeyCode.LeftShift

UserInputService.InputBegan:Connect(function(input)
    if input.KeyCode == shiftKey and AimbotEnabled then
        -- Find the closest player within FOV when Shift is pressed
        LockedPlayer = getClosestPlayerInFOV()
        if LockedPlayer then
            AimbotActive = true  -- Enable aimbot when locked onto a player
        end
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.KeyCode == shiftKey then
        AimbotActive = false  -- Disable aimbot when Shift is released
        LockedPlayer = nil  -- Clear the locked player when the key is released
    end
end)

RunService.RenderStepped:Connect(function()
    if AimbotActive and LockedPlayer then
        aimAtPlayer(LockedPlayer)
    end

    -- Update FOV Circle Position
    local mousePos = UserInputService:GetMouseLocation()
    fovCircle.Position = Vector2.new(mousePos.X, mousePos.Y)
end)

local function onPlayerAdded(player)
    player.CharacterAdded:Connect(function(character)
        createHPBar(character)  -- Create HP bar for new players
        if HighlightEnabled then
            highlightPlayer(player)  -- Highlight new players
        end
    end)
end

Players.PlayerAdded:Connect(onPlayerAdded)

-- Handle existing players
for _, player in pairs(Players:GetPlayers()) do
    if player.Character then
        createHPBar(player.Character)  -- Create HP bar for already existing characters
    end
    player.CharacterAdded:Connect(function(character)
        createHPBar(character)  -- Ensure HP bar for respawns
    end)
end

local ESPEnabled = false  -- Initialize the ESP toggle

local function getdistancefc(part)
    return (part.Position - c.CFrame.Position).Magnitude
end

local function esp(p, cr)
    local h = cr:WaitForChild("Humanoid")
    local head = cr:WaitForChild("Head")  -- Changed from hrp to head

    local text = Drawing.new("Text")
    text.Visible = false
    text.Center = true 
    text.Outline = true 
    text.Font = 2
    text.Color = Color3.fromRGB(255, 255, 255)
    text.Size = 13

    local c1, c2, c3

    local function dc()
        text.Visible = false
        text:Remove()
        if c1 then c1:Disconnect() c1 = nil end
        if c2 then c2:Disconnect() c2 = nil end
        if c3 then c3:Disconnect() c3 = nil end
    end

    c2 = cr.AncestryChanged:Connect(function(_, parent)
        if not parent then dc() end
    end)

    c3 = h.HealthChanged:Connect(function(v)
        if (v <= 0) or (h:GetState() == Enum.HumanoidStateType.Dead) then
            dc()
        end
    end)

    c1 = rs.RenderStepped:Connect(function()
        if ESPEnabled then
            local head_pos, head_os = c:WorldToViewportPoint(head.Position + Vector3.new(0, 2, 0))  -- Added Y offset of 2
            if head_os then
                text.Position = Vector2.new(head_pos.X, head_pos.Y)
                text.Text = p.Name .. ' (' .. tostring(math.floor(getdistancefc(head))) .. ' M)'  -- Use 'studs' instead of 'ms'
                text.Visible = true 
            else
                text.Visible = false 
            end
        else
            text.Visible = false  -- Hide the text if ESP is disabled
        end
    end)
end

local function p_added(p)
    if p.Character then
        esp(p, p.Character)
    end
    p.CharacterAdded:Connect(function(cr)
        esp(p, cr)
    end)
end



-- Toggle for highlighting
pcall(function()
    EspTab:AddToggle({
        Name = "Highlight",
        Default = false,
        Callback = function(value)
            HighlightEnabled = value
            for _, player in pairs(Players:GetPlayers()) do
                if player.Character then
                    if HighlightEnabled then
                        highlightPlayer(player)
                    else
                        local highlight = player.Character:FindFirstChildOfClass("Highlight")
                        if highlight then highlight:Destroy() end
                    end
                end
            end
        end
    })
end)

-- Toggle for HP bar
pcall(function()
    EspTab:AddToggle({
        Name = "HP Bar",
        Default = false,
        Callback = function(value)
            HPBarEnabled = value
            for _, player in pairs(Players:GetPlayers()) do
                if player.Character then
                    if HPBarEnabled then
                        createHPBar(player.Character)
                    else
                        local hpBar = player.Character:FindFirstChild("HPBar")
                        if hpBar then hpBar:Destroy() end
                    end
                end
            end
        end
    })
end)


-- Toggle implementation
pcall(function()
    EspTab:AddToggle({
        Name = "NAME DISTANCE",
        Default = false,
        Callback = function(value)
            ESPEnabled = value
            -- Hide all existing ESP texts if disabled
            for _, player in pairs(ps:GetPlayers()) do
                if player.Character then
                    local text = player.Character:FindFirstChildOfClass("Text")
                    if text then
                        text.Visible = false
                    end
                end
            end
        end
    })
end)

for i, p in next, ps:GetPlayers() do 
    if p ~= lp then
        p_added(p)
    end
end

ps.PlayerAdded:Connect(p_added)
pcall(function()
AimbotTab:AddToggle({
    Name = "Aimbot",
    Default = false,
    Callback = function(value)
        AimbotEnabled = value
    end
})
end)
pcall(function()
AimbotTab:AddToggle({
    Name = "Team Check",
    Default = false,
    Callback = function(value)
        TeamCheckEnabled = value  -- Enable or disable team check
    end
})
end)
pcall(function()
AimbotTab:AddToggle({
    Name = "Wall Check",
    Default = false,
    Callback = function(value)
        WallCheckEnabled = value  -- Toggle wall check on or off
    end
})
end)
pcall(function()
AimbotTab:AddSlider({
    Name = "FOV Size",
    Min = 50,
    Max = 1000,
    Default = FOV,
    Color = Color3.fromRGB(255, 255, 255),
    Increment = 5,
    ValueName = "blocks",
    Callback = function(value)
        FOV = value
        fovCircle.Radius = value / 2  -- Update FOV circle size
    end
})
end)
pcall(function()
AimbotTab:AddColorpicker({
    Name = "FOV Color",
    Default = FOVCircleColor,  -- Default color
    Callback = function(value)
        FOVCircleColor = value  -- Update the FOV circle color
        fovCircle.Color = FOVCircleColor
    end
})
end)
pcall(function()
AimbotTab:AddSlider({
    Name = "Smoothness",
    Min = 1, -- slow
    Max = 10, -- instant
    Default = Smoothness, -- current settings
    Color = Color3.fromRGB(255, 255, 255),
    Increment = 1,
    ValueName = "block",
    Callback = function(value)
        Smoothness = value
    end
})
end)

-- Player added handling
Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function(character)
        if HighlightEnabled then highlightPlayer(player) end
        if HPBarEnabled then createHPBar(character) end
    end)
end)

-- Initialize OrionLib
OrionLib:Init()
